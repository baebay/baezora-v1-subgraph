// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AskCreated extends ethereum.Event {
  get params(): AskCreated__Params {
    return new AskCreated__Params(this);
  }
}

export class AskCreated__Params {
  _event: AskCreated;

  constructor(event: AskCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ask(): AskCreatedAskStruct {
    return this._event.parameters[1].value.toTuple() as AskCreatedAskStruct;
  }
}

export class AskCreatedAskStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get sellOnFee(): AskCreatedAskSellOnFeeStruct {
    return this[2].toTuple() as AskCreatedAskSellOnFeeStruct;
  }
}

export class AskCreatedAskSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class AskRemoved extends ethereum.Event {
  get params(): AskRemoved__Params {
    return new AskRemoved__Params(this);
  }
}

export class AskRemoved__Params {
  _event: AskRemoved;

  constructor(event: AskRemoved) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class BidCreated extends ethereum.Event {
  get params(): BidCreated__Params {
    return new BidCreated__Params(this);
  }
}

export class BidCreated__Params {
  _event: BidCreated;

  constructor(event: BidCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bid(): BidCreatedBidStruct {
    return this._event.parameters[1].value.toTuple() as BidCreatedBidStruct;
  }
}

export class BidCreatedBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): BidCreatedBidSellOnFeeStruct {
    return this[4].toTuple() as BidCreatedBidSellOnFeeStruct;
  }
}

export class BidCreatedBidSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class BidFinalized extends ethereum.Event {
  get params(): BidFinalized__Params {
    return new BidFinalized__Params(this);
  }
}

export class BidFinalized__Params {
  _event: BidFinalized;

  constructor(event: BidFinalized) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bid(): BidFinalizedBidStruct {
    return this._event.parameters[1].value.toTuple() as BidFinalizedBidStruct;
  }
}

export class BidFinalizedBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): BidFinalizedBidSellOnFeeStruct {
    return this[4].toTuple() as BidFinalizedBidSellOnFeeStruct;
  }
}

export class BidFinalizedBidSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class BidRemoved extends ethereum.Event {
  get params(): BidRemoved__Params {
    return new BidRemoved__Params(this);
  }
}

export class BidRemoved__Params {
  _event: BidRemoved;

  constructor(event: BidRemoved) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bid(): BidRemovedBidStruct {
    return this._event.parameters[1].value.toTuple() as BidRemovedBidStruct;
  }
}

export class BidRemovedBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): BidRemovedBidSellOnFeeStruct {
    return this[4].toTuple() as BidRemovedBidSellOnFeeStruct;
  }
}

export class BidRemovedBidSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class BidShareUpdated extends ethereum.Event {
  get params(): BidShareUpdated__Params {
    return new BidShareUpdated__Params(this);
  }
}

export class BidShareUpdated__Params {
  _event: BidShareUpdated;

  constructor(event: BidShareUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidShares(): BidShareUpdatedBidSharesStruct {
    return this._event.parameters[1].value.toTuple() as BidShareUpdatedBidSharesStruct;
  }
}

export class BidShareUpdatedBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): BidShareUpdatedBidSharesPrevOwnerStruct {
    return this[0].toTuple() as BidShareUpdatedBidSharesPrevOwnerStruct;
  }

  get creator(): BidShareUpdatedBidSharesCreatorStruct {
    return this[1].toTuple() as BidShareUpdatedBidSharesCreatorStruct;
  }

  get owner(): BidShareUpdatedBidSharesOwnerStruct {
    return this[2].toTuple() as BidShareUpdatedBidSharesOwnerStruct;
  }
}

export class BidShareUpdatedBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class BidShareUpdatedBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class BidShareUpdatedBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market___splitShareInputSharePercentageStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__bidForTokenBidderResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): Market__bidForTokenBidderResultValue0SellOnFeeStruct {
    return this[4].toTuple() as Market__bidForTokenBidderResultValue0SellOnFeeStruct;
  }
}

export class Market__bidForTokenBidderResultValue0SellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__bidSharesForTokenResultValue0Struct extends ethereum.Tuple {
  get prevOwner(): Market__bidSharesForTokenResultValue0PrevOwnerStruct {
    return this[0].toTuple() as Market__bidSharesForTokenResultValue0PrevOwnerStruct;
  }

  get creator(): Market__bidSharesForTokenResultValue0CreatorStruct {
    return this[1].toTuple() as Market__bidSharesForTokenResultValue0CreatorStruct;
  }

  get owner(): Market__bidSharesForTokenResultValue0OwnerStruct {
    return this[2].toTuple() as Market__bidSharesForTokenResultValue0OwnerStruct;
  }
}

export class Market__bidSharesForTokenResultValue0PrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__bidSharesForTokenResultValue0CreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__bidSharesForTokenResultValue0OwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__currentAskForTokenResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get sellOnFee(): Market__currentAskForTokenResultValue0SellOnFeeStruct {
    return this[2].toTuple() as Market__currentAskForTokenResultValue0SellOnFeeStruct;
  }
}

export class Market__currentAskForTokenResultValue0SellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__isValidBidSharesInputBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): Market__isValidBidSharesInputBidSharesPrevOwnerStruct {
    return this[0].toTuple() as Market__isValidBidSharesInputBidSharesPrevOwnerStruct;
  }

  get creator(): Market__isValidBidSharesInputBidSharesCreatorStruct {
    return this[1].toTuple() as Market__isValidBidSharesInputBidSharesCreatorStruct;
  }

  get owner(): Market__isValidBidSharesInputBidSharesOwnerStruct {
    return this[2].toTuple() as Market__isValidBidSharesInputBidSharesOwnerStruct;
  }
}

export class Market__isValidBidSharesInputBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__isValidBidSharesInputBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market__isValidBidSharesInputBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  _splitShare(
    sharePercentage: Market___splitShareInputSharePercentageStruct,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "_splitShare",
      "_splitShare((uint256),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(sharePercentage),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try__splitShare(
    sharePercentage: Market___splitShareInputSharePercentageStruct,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_splitShare",
      "_splitShare((uint256),uint256):(uint256)",
      [
        ethereum.Value.fromTuple(sharePercentage),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidForTokenBidder(
    tokenId: BigInt,
    bidder: Address
  ): Market__bidForTokenBidderResultValue0Struct {
    let result = super.call(
      "bidForTokenBidder",
      "bidForTokenBidder(uint256,address):((uint256,address,address,address,(uint256)))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(bidder)
      ]
    );

    return result[0].toTuple() as Market__bidForTokenBidderResultValue0Struct;
  }

  try_bidForTokenBidder(
    tokenId: BigInt,
    bidder: Address
  ): ethereum.CallResult<Market__bidForTokenBidderResultValue0Struct> {
    let result = super.tryCall(
      "bidForTokenBidder",
      "bidForTokenBidder(uint256,address):((uint256,address,address,address,(uint256)))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(bidder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__bidForTokenBidderResultValue0Struct
    );
  }

  bidSharesForToken(
    tokenId: BigInt
  ): Market__bidSharesForTokenResultValue0Struct {
    let result = super.call(
      "bidSharesForToken",
      "bidSharesForToken(uint256):(((uint256),(uint256),(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTuple() as Market__bidSharesForTokenResultValue0Struct;
  }

  try_bidSharesForToken(
    tokenId: BigInt
  ): ethereum.CallResult<Market__bidSharesForTokenResultValue0Struct> {
    let result = super.tryCall(
      "bidSharesForToken",
      "bidSharesForToken(uint256):(((uint256),(uint256),(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__bidSharesForTokenResultValue0Struct
    );
  }

  currentAskForToken(
    tokenId: BigInt
  ): Market__currentAskForTokenResultValue0Struct {
    let result = super.call(
      "currentAskForToken",
      "currentAskForToken(uint256):((uint256,address,(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toTuple() as Market__currentAskForTokenResultValue0Struct;
  }

  try_currentAskForToken(
    tokenId: BigInt
  ): ethereum.CallResult<Market__currentAskForTokenResultValue0Struct> {
    let result = super.tryCall(
      "currentAskForToken",
      "currentAskForToken(uint256):((uint256,address,(uint256)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__currentAskForTokenResultValue0Struct
    );
  }

  isValidBid(tokenId: BigInt, bidAmount: BigInt): boolean {
    let result = super.call(
      "isValidBid",
      "isValidBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(bidAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidBid(
    tokenId: BigInt,
    bidAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidBid",
      "isValidBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(bidAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidBidShares(
    bidShares: Market__isValidBidSharesInputBidSharesStruct
  ): boolean {
    let result = super.call(
      "isValidBidShares",
      "isValidBidShares(((uint256),(uint256),(uint256))):(bool)",
      [ethereum.Value.fromTuple(bidShares)]
    );

    return result[0].toBoolean();
  }

  try_isValidBidShares(
    bidShares: Market__isValidBidSharesInputBidSharesStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidBidShares",
      "isValidBidShares(((uint256),(uint256),(uint256))):(bool)",
      [ethereum.Value.fromTuple(bidShares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenContract(): Address {
    let result = super.call("tokenContract", "tokenContract():(address)", []);

    return result[0].toAddress();
  }

  try_tokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenContract",
      "tokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expectedBid(): AcceptBidCallExpectedBidStruct {
    return this._call.inputValues[1].value.toTuple() as AcceptBidCallExpectedBidStruct;
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class AcceptBidCallExpectedBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): AcceptBidCallExpectedBidSellOnFeeStruct {
    return this[4].toTuple() as AcceptBidCallExpectedBidSellOnFeeStruct;
  }
}

export class AcceptBidCallExpectedBidSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class AddBidSharesCall extends ethereum.Call {
  get inputs(): AddBidSharesCall__Inputs {
    return new AddBidSharesCall__Inputs(this);
  }

  get outputs(): AddBidSharesCall__Outputs {
    return new AddBidSharesCall__Outputs(this);
  }
}

export class AddBidSharesCall__Inputs {
  _call: AddBidSharesCall;

  constructor(call: AddBidSharesCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidShares(): AddBidSharesCallBidSharesStruct {
    return this._call.inputValues[1].value.toTuple() as AddBidSharesCallBidSharesStruct;
  }
}

export class AddBidSharesCall__Outputs {
  _call: AddBidSharesCall;

  constructor(call: AddBidSharesCall) {
    this._call = call;
  }
}

export class AddBidSharesCallBidSharesStruct extends ethereum.Tuple {
  get prevOwner(): AddBidSharesCallBidSharesPrevOwnerStruct {
    return this[0].toTuple() as AddBidSharesCallBidSharesPrevOwnerStruct;
  }

  get creator(): AddBidSharesCallBidSharesCreatorStruct {
    return this[1].toTuple() as AddBidSharesCallBidSharesCreatorStruct;
  }

  get owner(): AddBidSharesCallBidSharesOwnerStruct {
    return this[2].toTuple() as AddBidSharesCallBidSharesOwnerStruct;
  }
}

export class AddBidSharesCallBidSharesPrevOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class AddBidSharesCallBidSharesCreatorStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class AddBidSharesCallBidSharesOwnerStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class ConfigureCall extends ethereum.Call {
  get inputs(): ConfigureCall__Inputs {
    return new ConfigureCall__Inputs(this);
  }

  get outputs(): ConfigureCall__Outputs {
    return new ConfigureCall__Outputs(this);
  }
}

export class ConfigureCall__Inputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }

  get tokenContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfigureCall__Outputs {
  _call: ConfigureCall;

  constructor(call: ConfigureCall) {
    this._call = call;
  }
}

export class RemoveAskCall extends ethereum.Call {
  get inputs(): RemoveAskCall__Inputs {
    return new RemoveAskCall__Inputs(this);
  }

  get outputs(): RemoveAskCall__Outputs {
    return new RemoveAskCall__Outputs(this);
  }
}

export class RemoveAskCall__Inputs {
  _call: RemoveAskCall;

  constructor(call: RemoveAskCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveAskCall__Outputs {
  _call: RemoveAskCall;

  constructor(call: RemoveAskCall) {
    this._call = call;
  }
}

export class RemoveBidCall extends ethereum.Call {
  get inputs(): RemoveBidCall__Inputs {
    return new RemoveBidCall__Inputs(this);
  }

  get outputs(): RemoveBidCall__Outputs {
    return new RemoveBidCall__Outputs(this);
  }
}

export class RemoveBidCall__Inputs {
  _call: RemoveBidCall;

  constructor(call: RemoveBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bidder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveBidCall__Outputs {
  _call: RemoveBidCall;

  constructor(call: RemoveBidCall) {
    this._call = call;
  }
}

export class SetAskCall extends ethereum.Call {
  get inputs(): SetAskCall__Inputs {
    return new SetAskCall__Inputs(this);
  }

  get outputs(): SetAskCall__Outputs {
    return new SetAskCall__Outputs(this);
  }
}

export class SetAskCall__Inputs {
  _call: SetAskCall;

  constructor(call: SetAskCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ask(): SetAskCallAskStruct {
    return this._call.inputValues[1].value.toTuple() as SetAskCallAskStruct;
  }
}

export class SetAskCall__Outputs {
  _call: SetAskCall;

  constructor(call: SetAskCall) {
    this._call = call;
  }
}

export class SetAskCallAskStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get sellOnFee(): SetAskCallAskSellOnFeeStruct {
    return this[2].toTuple() as SetAskCallAskSellOnFeeStruct;
  }
}

export class SetAskCallAskSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}

export class SetBidCall extends ethereum.Call {
  get inputs(): SetBidCall__Inputs {
    return new SetBidCall__Inputs(this);
  }

  get outputs(): SetBidCall__Outputs {
    return new SetBidCall__Outputs(this);
  }
}

export class SetBidCall__Inputs {
  _call: SetBidCall;

  constructor(call: SetBidCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bid(): SetBidCallBidStruct {
    return this._call.inputValues[1].value.toTuple() as SetBidCallBidStruct;
  }

  get spender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetBidCall__Outputs {
  _call: SetBidCall;

  constructor(call: SetBidCall) {
    this._call = call;
  }
}

export class SetBidCallBidStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get currency(): Address {
    return this[1].toAddress();
  }

  get bidder(): Address {
    return this[2].toAddress();
  }

  get recipient(): Address {
    return this[3].toAddress();
  }

  get sellOnFee(): SetBidCallBidSellOnFeeStruct {
    return this[4].toTuple() as SetBidCallBidSellOnFeeStruct;
  }
}

export class SetBidCallBidSellOnFeeStruct extends ethereum.Tuple {
  get value(): BigInt {
    return this[0].toBigInt();
  }
}
